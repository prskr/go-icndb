openapi: 3.0.1
info:
  title: icndb
  description: ICNDB sample API for ITB
  version: 0.0.1
servers:
  - url: /api
paths:
  /joke/{id}:
    get:
      summary: Get the joke with the specified id
      operationId: Get joke by id
      parameters:
        - name: id
          in: path
          description: Joke ID
          required: true
          schema:
            type: integer
        - name: firstName
          in: query
          description: Name to replace Chuck with in Joke
          schema:
            type: string
        - name: lastName
          in: query
          description: Name to replace Norris with in Joke
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactResponse'
        '404':
          description: Not found
          content: {}
  /jokes/random:
    get:
      summary: Get a random joke
      operationId: getRandomJoke
      parameters:
        - name: firstName
          in: query
          description: Name to replace Chuck with in Joke
          schema:
            type: string
        - name: lastName
          in: query
          description: Name to replace Norris with in Joke
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactResponse'
  /jokes/count:
    get:
      summary: Get the count of the available jokes
      operationId: getJokesCount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
  /metrics:
    get:
      summary: Get metrics in a Prometheus compatible format
      operationId: prometheusMetrics
      responses:
        '200':
          description: OK
          content: {}
  /health:
    get:
      summary: Check the health state of the service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content: {}
        '500':
          description: Service is not healty
          content: {}
components:
  schemas:
    CountResponse:
      required:
        - count
      type: object
      properties:
        count:
          type: integer
    FactResponse:
      required:
        - categories
        - joke
      type: object
      properties:
        id:
          type: integer
        joke:
          type: string
        categories:
          type: array
          items:
            type: string